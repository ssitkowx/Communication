// General class for communication
// author sylsit
// 2020.02.06

#pragma once 

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// MACROS/DEFINITIONS ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// VARIABLES ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class Communication
{
	public:
        enum class EState : uint8_t
        {
            eSend,
            eReceive
        };

        Communication          () { setState (EState::eReceive); }
        virtual ~Communication () = default;

        void Process (void);

    protected:
        static void                  clearMsgBufs (uint8_t v_msgData [], uint16_t & v_msgDataLen);

        inline void                  setState     (Communication::EState v_eState) { eState = v_eState; }
        inline Communication::EState getState     (void) { return eState; }

        virtual void                 send         (void) = 0;
        virtual void                 receive      (void) = 0;

    private:
        EState eState;
};

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// FUNCTIONS ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////// END OF FILE ///////////////////////////////////

