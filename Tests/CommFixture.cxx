///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include "LoggerHw.hpp"
#include <gmock/gmock.h>
#include "CommFixture.hxx"

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// FUNCTIONS ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

TEST_F (CommFixture, CheckThatSendOrReceiveCanBeChoosed)
{
    LOGW (Module, "CheckThatSendOrReceiveCanBeChoosed");

    EXPECT_CALL (CommHw, send    ()).Times (2);
    EXPECT_CALL (CommHw, receive ()).Times (2);

    for (uint8_t iterNum = 0; iterNum < 4; iterNum++)
    {
        CommHw.Process ();

        if ((iterNum == 0) || (iterNum == 2))
        {
            LOGD (Module, "Set communication state Send");
            CommHw.State = Communication <decltype (CommHw)>::EState::Send;
        }
        else
        {
            LOGD (Module, "Set communication state Receive");
            CommHw.State = Communication <decltype (CommHw)>::EState::Receive;
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
